nomeEscolas <- c("Elefante Branco", "Liceu", "Pedro II")
nomeEscolas
alunosInscritos <- c(200,250,300)
alunosInscritos
mediaEscola <- c(400.34, 453.27, 425.32)
mediaEscola
dfEnem = data.frame(Nome_Escola = nomeEscolas,
Quantidade_Alunos = alunosInscritos,
Media_Alunos = mediaEscola)
view(dfEnem)
dfEnem
View(dfEnem)
View(dfEnem)
mediaEscola <- c(404.45, 487.27, 452.23)
dfEnem = data.frame(Nome_Escola = nomeEscolas,
Quantidade_Alunos = alunosInscritos,
Media_Alunos = mediaEscola)
sexo <- c("Masculino","Masculino","Masculino","Feminino","Feminino","Feminino","Feminino")
formacao <- c("Administração", "Engenharia", "Economia", "Administração", "Economia", "Medicina", "Psicologia")
lotacao <- c("RH", "Financeiro", "Financeiro", "Atendimento", "Planejamento", "Perícia Médica", "RH")
remuneracao <- c(8000, 7500, 8200, 8300, 8200, 8300, 8250)
dfServidores (Id_Servidor = idServidor,
Sexo = sexo,
Formação = formacao,
Lotação = lotacao,
Remuneração = remuneracao)
dfServidores = data.frame(Id_Servidor = idServidor,
Sexo = sexo,
Formação = formacao,
Lotação = lotacao,
Remuneração = remuneracao)
idServidor <- c(1,2,3,4,5,6,7)
dfServidores = data.frame(Id_Servidor = idServidor,
Sexo = sexo,
Formação = formacao,
Lotação = lotacao,
Remuneração = remuneracao)
View(dfServidores)
View(dfServidores)
install.packages("questionr")
install.packages("questionr")
library(questionr)
nomeHospital <- c("São Sebastião", "João Paulo II", "Trindade", "São Clemente", "Hospital Regional", "Hospital Geral")
redeHospitalar <- c("Municipal", "Municipal", "Federal", "Estadual", "Estadual",  "Municipal")
hospitais <- data.frame(Nome_hospital = nomeHospital,
Rede_Hospitalar = redeHospitalar)
hospitais$Nome_hospital
hospitais$Rede_Hospitalar
View(hospitais)
View(hospitais)
questionr::freq(x= hospitais$Rede_Hospitalar, cum = TRUE, sort = "desc")
library(questionr)
questionr::(dfServidores$Sexo, cum = TRUE, sort = "desc")
questionr::(x = dfServidores$Sexo, cum = TRUE, sort = "desc")
questionr::freq(x = dfServidores$Sexo, cum = TRUE, sort = "desc")
questionr::freq(x = dfServidores$Sexo, total = TRUE, sort = "desc")
questionr::freq(x = dfServidores$Sexo)
questionr::freq(dfServidores$Sexo)
questionr::freq(dfServidores$Formação)
questionr::freq(dfServidores$Formação, cum = TRUE)
1:100
set.seed(1972)
valores_aleatorios<- sample(x=1:100, size = 50)
valores_aleatorios
sum(1:3)
NROW(1:3)
sum(valores_aleatorios)/NROW(valores_aleatorios)
mean(x= valores_aleatorios)
median(x= valores_aleatorios)
min(valores_aleatorios)
max(valores_aleatorios)
sd(valores_aleatorios)
# calculando a amplitude do conjunto "valores_aleatorios"
max(valores_aleatorios) - min(valores_aleatorios)
custos_hospitalares<- c(1955.77, 1884.48, 1825.71, 2002.66, 1924.01, 1946.58, 2098.05, 2050.29, 2015.67, 2011.02)
media = mean(custos_hospitalares)
mediana = median(custos_hospitalares)
desvioPadrao = sd(custos_hospitalares)
print("A Média dos custos hospitalares: " + media)
print("A Média dos custos hospitalares: " . media)
print("A Média dos custos hospitalares: ", media)
print("A Média dos custos hospitalares: {media}")
print(f"A Média dos custos hospitalares: {media}")
print(paste("A Média dos custos hospitalares: ", media))
print(paste("A mediana dos custos hospitalares: ", mediana)
print(paste("A mediana dos custos hospitalares: ", mediana))
print("O Devio Padrão dos custos hospitalares: " + desvioPadrao)
print(paste("A mediana dos custos hospitalares: ", mediana))
print(paste("O Devio Padrão dos custos hospitalares: ", desvioPadrao))
receita<- 5000000
despesa<- 2000000
resultado_contabil<- receita-despesa
resultado_contabil
nome_escola<- c("Elefante Branco", "Liceu", "Pedro II")
quantidade_alunos_inscritos<- c(200, 250, 300)
media_escola<- c(400.34 , 453.27, 425.32)
df_enem<- data.frame(nome_escola=nome_escola,
quantidade_alunos_inscritos=quantidade_alunos_inscritos,
media_escola=media_escola)
library(questionr)
nome_hospital<- c("São Sebastião","João Paulo II","Trindade","São Clemente","Hospital Regional", "Hospital Geral")
rede_hospitalar<- c("municipal","municipal","federal","estadual","estadual","municipal")
hospitais<- data.frame(nome_hospital= nome_hospital, rede_hospitalar= rede_hospitalar)
questionr::freq(hospitais$rede_hospitalar, cum = TRUE, sort = "dec", total = TRUE)
install.packages("questionr")
library(questionr)
nome_hospital<- c("São Sebastião","João Paulo II","Trindade","São Clemente","Hospital Regional", "Hospital Geral")
rede_hospitalar<- c("municipal","municipal","federal","estadual","estadual","municipal")
hospitais<- data.frame(nome_hospital= nome_hospital, rede_hospitalar= rede_hospitalar)
questionr::freq(hospitais$rede_hospitalar, cum = TRUE, sort = "dec", total = TRUE)
#O set.seed(1972) possibilita que os números gerados aleatoriamente logo a seguir sejam repetidos em próximas execuções
set.seed(1972)
#gera um conjunto com 50 números aleatórios entre 1 e 100
valores_aleatorios<- sample(1:100, size = 50)
mean(valores_aleatorios)
median(valores_aleatorios)
#O set.seed(13) possibilita que os números gerados aleatoriamente logo a seguir sejam repetidos em próximas execuções
set.seed(13)
#gera um conjunto com 50 números aleatórios entre 1 e 100
novos_valores_aleatorios<- sample(1:100, size = 50)
sd(novos_valores_aleatorios)
min(novos_valores_aleatorios)
max(novos_valores_aleatorios)
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
detach("package:tidyverse", unload = TRUE)
library(tidyverse)
install.packages(c("cli", "colorspace", "crayon", "foreign", "ggpmisc", "ggpp", "KernSmooth", "MASS", "multcomp", "nlme", "Rcpp", "rlang", "s2", "SparseM", "survival", "withr", "wk", "xts"))
install.packages("cli")
library(tidyverse)
yverse
library(tidyverse)
arquivo<- "https://raw.githubusercontent.com/fernandobarbalho/enap_auto_instucional/main/data/dados_municipios.csv"
library(tidyverse)
library(dplyr)
arquivo<- "https://raw.githubusercontent.com/fernandobarbalho/enap_auto_instucional/main/data/dados_municipios.csv"
dados_municipios<- read.csv(file= arquivo)
dados_municipios
glimpse(dados_municipios)
# Usando filtros
filter(.data= dados_municipios, sigla_uf=="PE" )
filter(.data= dados_municipios, sigla_uf=="CE" )
dados_municipios %>%
filter(sigla_uf=="CE")
dados_municipios %>%
filter(sigla_uf=="SP")
dados_municipios %>%
filter(sigla_uf=="CE") %>%
filter(populacao > 100000)
View(dados_municipios)
View(dados_municipios)
names(dados_municipios)
dados_municipios%>%
filter(sigla_uf == "CE") %>%
filter(populacao > 100000) %>%
select(sigla_uf,nome, populacao) #indica as colunas que devem aparecer no resultado da sequência de comandos
dados_municipios%>%
filter(sigla_uf == "CE") %>%
filter(populacao > 100000) %>%
select(sigla_uf,nome, populacao) %>% #indica as colunas que devem aparecer no resultado da sequência de comandos
arrange(desc(populacao))
dados_municipios %>%
group_by(sigla_uf) %>% #Agrupa pela variável sigla_uf
summarise(
populacao_estado = sum(populacao) #soma a populacao de todos os municípios
)
dados_municipios %>%
group_by(sigla_uf) %>% #Agrupa pela variável sigla_uf
summarise(
populacao_estado = sum(populacao) #soma a populacao de todos os municípios
)
dados_municipios %>%
group_by(sigla_uf) %>% #Agrupa pela variável sigla_uf
summarise(
populacao_estado = sum(populacao) #soma a populacao de todos os municípios
) %>%
arrange(desc(populacao_estado)) #faz a ordenação descrescente por populacao_estado
dados_municipios %>%
group_by(sigla_uf) %>% #Agrupa pela variável sigla_uf
summarise(
quantidade_municipios = n() #soma a populacao de todos os municípios
) %>%
arrange(desc(quantidade_municipios)) #faz a ordenação descrescente por populacao_estado
dados_municipios %>%
group_by(sigla_uf) %>% #Agrupa pela variável sigla_uf
summarise(
quantidade_municipios = n(),
populacao_estado = sum(populacao),
media_populacao = mean(populacao),
mediana_populacao = median(populacao)
) %>%
arrange(desc(quantidade_municipios)) #faz a ordenação descrescente por populacao_estado
dados_municipios %>%
mutate(nome_regiao_saude_uf = paste(nome, nome_regiao_saude, sigla_uf, sep = "-")) %>%
select(nome_regiao_saude_uf, populacao)
library(tidyverse)
library(dplyr)
arquivo<- "https://raw.githubusercontent.com/fernandobarbalho/enap_auto_instucional/main/data/dados_municipios.csv"
dados_municipios<- read.csv(file= arquivo)
library(tidyverse)
#url do dado
url_habitacao<- "http://sishab.mdr.gov.br/dados_abertos/_contratacoes_pcmv_pcva.csv"
#download do dado a partir do endereço da url
download.file(url = url_habitacao, destfile = "contratacoes_pcmv_pcva.csv", mode="wb")
library(tidyverse)
library(questionr)
library(questionr)
library(questionr)
library(tidyverse)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
install.packages("questionr")
library(dplyr)
#Instale o pacote dados
install.packages("dados")
library(tidyverse)
#url do dado
url_habitacao<- "http://sishab.mdr.gov.br/dados_abertos/_contratacoes_pcmv_pcva.csv"
#download do dado a partir do endereço da url
download.file(url = url_habitacao, destfile = "contratacoes_pcmv_pcva.csv", mode="wb")
#download do dado a partir do endereço da url
download.file(url = url_habitacao, destfile = "cmcmv_subsidiado_ogu202404.csv", mode="wb")
#gera um dataframe a partir do arquivo csv baixado
contratacoes_pcmv_pcva <- read_delim("cmcmv_subsidiado_ogu202404.csv",
delim = "|", escape_double = FALSE, locale = locale(encoding = "LATIN1"),
trim_ws = TRUE) #sugestão: procure ler sobre encoding
#gera um dataframe a partir do arquivo csv baixado
contratacoes_pcmv_pcva <- read_delim("cmcmv_subsidiado_ogu202404.csv",
delim = "|", escape_double = FALSE, locale = locale(encoding = "LATIN1"),
trim_ws = TRUE) #sugestão: procure ler sobre encoding
#gera um dataframe a partir do arquivo csv baixado
contratacoes_pcmv_pcva <- read_delim("cmcmv_subsidiado_ogu202404.csv",
delim = "|", escape_double = FALSE, locale = locale(encoding = "LATIN1"),
trim_ws = TRUE) #sugestão: procure ler sobre encoding
#gera um dataframe a partir do arquivo csv baixado
contratacoes_pcmv_pcva <- read_delim("./cmcmv_subsidiado_ogu202404.csv",
delim = "|", escape_double = FALSE, locale = locale(encoding = "LATIN1"),
trim_ws = TRUE) #sugestão: procure ler sobre encoding
library(tidyverse)
#gera um dataframe a partir do arquivo csv baixado
contratacoes_pcmv_pcva <- read_delim("cmcmv_subsidiado_ogu202404.csv",
delim = "|", escape_double = FALSE, locale = locale(encoding = "LATIN1"),
trim_ws = TRUE) #sugestão: procure ler sobre encoding
#gera um dataframe a partir do arquivo csv baixado
contratacoes_pcmv_pcva <- read_delim("C:\Users\cg080123\Documents\Developer\EnapCurso\cmcmv_subsidiado_ogu202404.csv",
delim = "|", escape_double = FALSE, locale = locale(encoding = "LATIN1"),
trim_ws = TRUE) #sugestão: procure ler sobre encoding
#gera um dataframe a partir do arquivo csv baixado
contratacoes_pcmv_pcva <- read_delim("C:\Users\cg080123\Documents\Developer\EnapCurso\cmcmv_subsidiado_ogu202404.csv",
delim = ";", escape_double = FALSE, locale = locale(encoding = "LATIN1"),
trim_ws = TRUE) #sugestão: procure ler sobre encoding
#gera um dataframe a partir do arquivo csv baixado
contratacoes_pcmv_pcva <- read_csv("C:\Users\cg080123\Documents\Developer\EnapCurso\cmcmv_subsidiado_ogu202404.csv") #sugestão: procure ler sobre encoding
##Dados abertos de dados.gov.br
library(readr)
#gera um dataframe a partir do arquivo csv baixado
contratacoes_pcmv_pcva <- read_delim("C:\Users\cg080123\Documents\Developer\EnapCurso\cmcmv_subsidiado_ogu202404.csv",
delim = "|", escape_double = FALSE, locale = locale(encoding = "LATIN1"),
trim_ws = TRUE)#sugestão: procure ler sobre encoding
#gera um dataframe a partir do arquivo csv baixado
contratacoes_pcmv_pcva <- read_delim("C:\Users\cg080123\Documents\Developer\EnapCurso\cmcmv_subsidiado_ogu202404.csv",
delim = ";", escape_double = FALSE, locale = locale(encoding = "LATIN1"),
trim_ws = TRUE)#sugestão: procure ler sobre encoding
library(tidyverse)
##Dados abertos de dados.gov.br
library(readr)
#gera um dataframe a partir do arquivo csv baixado
contratacoes_pcmv_pcva <- read_delim("C:\Users\cg080123\Documents\Developer\EnapCurso\cmcmv_subsidiado_ogu202404.csv",
delim = ";", escape_double = FALSE, locale = locale(encoding = "LATIN1"),
trim_ws = TRUE)#sugestão: procure ler sobre encoding
#gera um dataframe a partir do arquivo csv baixado
contratacoes_pcmv_pcva <- read_delim("C:/Users/cg080123/Documents/Developer/EnapCurso/cmcmv_subsidiado_ogu202404.csv",
delim = ";", escape_double = FALSE, locale = locale(encoding = "LATIN1"),
trim_ws = TRUE)#sugestão: procure ler sobre encoding
#gera um dataframe a partir do arquivo csv baixado
contratacoes_pcmv_pcva <- read_delim("C:\Users\cg080123\Documents\Developer\EnapCurso\cmcmv_subsidiado_ogu202404.csv",
delim = ";", escape_double = FALSE, locale = locale(encoding = "LATIN1"),
trim_ws = TRUE)#sugestão: procure ler sobre encoding
library(readr)
mcmv_subsidiado_ogu202404 <- read_delim("mcmv_subsidiado_ogu202404.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
View(mcmv_subsidiado_ogu202404)
#gera um dataframe a partir do arquivo csv baixado
contratacoes_pcmv_pcva <- read_delim("mcmv_subsidiado_ogu202404.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
contratacoes_pcmv_pcva%>%
group_by(txt_uf) %>%
summarise(
contratadas= sum(qtd_uh_contratadas), #soma das quantidades de unidades habitacionais contratadas
entregues = sum(qtd_uh_entregues), #soma das quantidades de unidades habitacionais entregues
perc_entregues = (entregues/contratadas)*100 #de unidades habitacionais entregues
) %>%
arrange(desc(perc_entregues))
contratacoes_pcmv_pcva%>%
group_by(txt_uf) %>%
summarise(
contratadas= sum(qtd_uh), #soma das quantidades de unidades habitacionais contratadas
entregues = sum(qtd_uh_entregues), #soma das quantidades de unidades habitacionais entregues
perc_entregues = (entregues/contratadas)*100 #de unidades habitacionais entregues
) %>%
arrange(desc(perc_entregues))
contratacoes_pcmv_pcva%>%
group_by(txt_sigla_uf) %>%
summarise(
contratadas= sum(qtd_uh), #soma das quantidades de unidades habitacionais contratadas
entregues = sum(qtd_uh_entregues), #soma das quantidades de unidades habitacionais entregues
perc_entregues = (entregues/contratadas)*100 #de unidades habitacionais entregues
) %>%
arrange(desc(perc_entregues))
library(readr)
mcmv_subsidiado_ogu202404 <- read_delim("mcmv_subsidiado_ogu202404.csv",
delim = ";", escape_double = FALSE, col_types = cols(qtd_uh = col_number(),
qtd_uh_distratadas = col_number(),
qtd_uh_entregues = col_number(),
qtd_uh_vigentes = col_number(), txt_cep = col_character(),
txt_cnpj_construtora_entidade = col_character()),
trim_ws = TRUE)
View(mcmv_subsidiado_ogu202404)
library(readr)
mcmv_subsidiado_ogu202404 <- read_delim("mcmv_subsidiado_ogu202404.csv",
delim = ";", escape_double = FALSE, col_types = cols(qtd_uh = col_number(),
qtd_uh_distratadas = col_number(),
qtd_uh_entregues = col_number(),
qtd_uh_vigentes = col_number(), txt_cep = col_character(),
txt_cnpj_construtora_entidade = col_character()),
locale = locale(decimal_mark = ",", grouping_mark = "."),
trim_ws = TRUE)
View(mcmv_subsidiado_ogu202404)
##Dados abertos de dados.gov.br
library(readr)
contratacoes_pcmv_pcva <- read_delim("mcmv_subsidiado_ogu202404.csv",
delim = ";", escape_double = FALSE, col_types = cols(qtd_uh = col_number(),
qtd_uh_distratadas = col_number(),
qtd_uh_entregues = col_number(),
qtd_uh_vigentes = col_number(), txt_cep = col_character(),
txt_cnpj_construtora_entidade = col_character()),
locale = locale(decimal_mark = ",", grouping_mark = "."),
trim_ws = TRUE)
contratacoes_pcmv_pcva%>%
group_by(txt_sigla_uf) %>%
summarise(
contratadas= sum(qtd_uh), #soma das quantidades de unidades habitacionais contratadas
entregues = sum(qtd_uh_entregues), #soma das quantidades de unidades habitacionais entregues
perc_entregues = (entregues/contratadas)*100 #de unidades habitacionais entregues
) %>%
arrange(desc(perc_entregues))
View(contratacoes_pcmv_pcva)
View(contratacoes_pcmv_pcva)
contratacoes_pcmv_pcva%>%
group_by(txt_sigla_uf) %>%
summarise(
contratadas= sum(qtd_uh), #soma das quantidades de unidades habitacionais contratadas
entregues = sum(qtd_uh_entregues), #soma das quantidades de unidades habitacionais entregues
perc_entregues = (entregues/contratadas)*100 #de unidades habitacionais entregues
) %>%
mutate(txt_sigla_uf=reorder(txt_sigla_uf, perc_entregues)) %>%
ggplot() +
geom_col(aes(x=perc_entregues, y=txt_sigla_uf))
install.packages("janitor") #instale o pacote para melhorar a legibilidade dos nomes da tabela
library(tidyverse)
library(janitor)
url_estoque_dpf<- "https://www.tesourotransparente.gov.br/ckan/dataset/0998f610-bc25-4ce3-b32c-a873447500c2/resource/b6280ed3-ef7e-4569-954a-bded97c2c8a1/download/EstoqueDPF.csv"
#lê o arquivo diretamente da url, observe que aqui não precisamos fazer o download do dado
estoque_dpf<- read_csv2(url_estoque_dpf)
#veja os nomes das colunas do dataframe
names(estoque_dpf)
#A função clean_names do pacote janitor deixa o nome das variáveis mais legíveis
estoque_dpf<- janitor::clean_names(estoque_dpf)
#veja como ficam os nomes das colunas do dataframe após a limpeza
names(estoque_dpf)
#gráfico a partir do agrupamento por tipo de dívida
estoque_dpf %>%
filter(mes_do_estoque=="12/2021") %>% #filtra para permanecer apenas dados de 12/2021
group_by(tipo_de_divida) %>% #agrupa por tipo de dívida (interna/externa)
summarise(
total_divida = sum(valor_do_estoque) #calcula o total da dívida por tipo
) %>%
ggplot()+
geom_col(aes(x=tipo_de_divida,y=total_divida))
install.packages("devtools")
devtools::install_github("tchiluanda/rtn")
library(rtn)
library(tidyverse)
rtn::get_full_account_name()
despesa_beneficios_previdenciarios<- "4.1 Benefícios Previdenciários"
get_account_data_by_month(despesa_beneficios_previdenciarios,month = 12)
dados_previdenciarios<-get_account_data_by_month(despesa_beneficios_previdenciarios,month = 1:12)
dados_previdenciarios%>%
plot_rtn_series()
get_account_data_by_month(despesa_beneficios_previdenciarios,month = 1:12) %>%
plot_rtn_series()
get_full_account_name()
despesas_obrigatorias<- c("4.4.1.1", "4.4.1.2", "4.4.1.3","4.4.1.4","4.4.1.5" )
get_12_month_accumulated_account_data_by_month(despesas_obrigatorias,
month = c(1:12), #indica que quer o valor acumulado para todos os 12 meses do ano
match_required = FALSE)%>% #indica que vai fazer o match sem precisar do nome completo da conta
plot_rtn_series() #gera o gráfico de linha
get_12_month_accumulated_account_data_by_month(despesas_obrigatorias,
month = c(1:12), #indica que quer o valor acumulado para todos os 12 meses do ano
match_required = FALSE)%>% #indica que vai fazer o match sem precisar do nome completo da conta
plot_rtn_series() #gera o gráfico de linha
#Instala o pacote Rcofog
devtools::install_github("tchiluanda/Rcofog")
library(Rcofog)
library(tidyverse)
#Gera um gráfico de fluxo entras funções e sub-funções de governo para o ano de 2020
Rcofog::dataExpenseFlow(year=2020)%>%
Rcofog::graphExpenseFlow()
#Gera um gráfico de série temporal para comparar saúde, educação e defesa
funcoes<- c("Saúde","Educação","Defesa")
#Antes vamos ver apenas os dados
Rcofog::dataTimeSeries(sel_function = funcoes)
#Agora vamos ver o gráfico também
Rcofog::dataTimeSeries(sel_function = funcoes) %>%
Rcofog::graphTimeSeries()
#Antes vamos ver apenas os dados
Rcofog::dataTimeSeries(sel_function = funcoes)
#Agora vamos ver o gráfico também
Rcofog::dataTimeSeries(sel_function = funcoes) %>%
Rcofog::graphTimeSeries()
